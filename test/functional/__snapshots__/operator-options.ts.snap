// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Operator options (async) should support allowing only the specified operators 1`] = `"Unary operator ! is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 2`] = `"Unary operator ~ is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 3`] = `"Binary operator + is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 4`] = `"Binary operator - is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 5`] = `"Binary operator * is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 6`] = `"Binary operator / is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 7`] = `"Binary operator < is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 8`] = `"Binary operator > is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 9`] = `"Binary operator <= is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 10`] = `"Binary operator >= is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 11`] = `"Binary operator == is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 12`] = `"Binary operator != is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 13`] = `"Binary operator === is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 14`] = `"Binary operator !== is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 15`] = `"Binary operator | is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 16`] = `"Binary operator ^ is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 17`] = `"Binary operator & is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 18`] = `"Binary operator << is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 19`] = `"Binary operator >> is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 20`] = `"Binary operator >>> is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 21`] = `"Logical operator || is not allowed"`;

exports[`Operator options (async) should support allowing only the specified operators 22`] = `"Logical operator ?? is not allowed"`;

exports[`Operator options (async) should support blocking specified operators 1`] = `"Unary operator + is not allowed"`;

exports[`Operator options (async) should support blocking specified operators 2`] = `"Unary operator - is not allowed"`;

exports[`Operator options (async) should support blocking specified operators 3`] = `"Binary operator ** is not allowed"`;

exports[`Operator options (async) should support blocking specified operators 4`] = `"Binary operator % is not allowed"`;

exports[`Operator options (async) should support blocking specified operators 5`] = `"Logical operator && is not allowed"`;

exports[`Operator options (async) should support blocking specified operators 6`] = `"Conditional/ternary operator is not allowed"`;

exports[`Operator options (async) should throw if providing an unsupported operator 1`] = `"Operator invalid is not supported"`;

exports[`Operator options (async) should throw if providing an unsupported operator 2`] = `"Operator invalid is not supported"`;

exports[`Operator options (async) should throw if providing an unsupported operator 3`] = `"Operator invalid is not supported"`;

exports[`Operator options (async) should throw if providing an unsupported operator 4`] = `"Operator invalid is not supported"`;

exports[`Operator options (async) should throw if providing an unsupported operator 5`] = `"Operator invalid is not supported"`;

exports[`Operator options (async) should throw if providing an unsupported operator 6`] = `"Operator invalid is not supported"`;

exports[`Operator options (async) should throw if providing both an allow and block list 1`] = `"Cannot specify both an allow list and block list of operators"`;

exports[`Operator options (async) should throw if providing both an allow and block list 2`] = `"Cannot specify both an allow list and block list of operators"`;

exports[`Operator options (async) should throw if providing both an allow and block list 3`] = `"Cannot specify both an allow list and block list of operators"`;

exports[`Operator options (async) should throw if the list is not an array 1`] = `"Operator allow list must be an array"`;

exports[`Operator options (async) should throw if the list is not an array 2`] = `"Operator block list must be an array"`;

exports[`Operator options (async) should throw if the list is not an array 3`] = `"Operator allow list must be an array"`;

exports[`Operator options (async) should throw if the list is not an array 4`] = `"Operator block list must be an array"`;

exports[`Operator options (async) should throw if the list is not an array 5`] = `"Operator allow list must be an array"`;

exports[`Operator options (async) should throw if the list is not an array 6`] = `"Operator block list must be an array"`;

exports[`Operator options (async) should throw if the options do not contain a list 1`] = `"Operator options must specify either an allow list or a block list"`;

exports[`Operator options (async) should throw if the options do not contain a list 2`] = `"Operator options must specify either an allow list or a block list"`;

exports[`Operator options (async) should throw if the options do not contain a list 3`] = `"Operator options must specify either an allow list or a block list"`;

exports[`Operator options (async) should throw if the options do not contain a list 4`] = `"Operator options must specify either an allow list or a block list"`;

exports[`Operator options (async) should throw if the options do not contain a list 5`] = `"Operator options must specify either an allow list or a block list"`;

exports[`Operator options (async) should throw if the options do not contain a list 6`] = `"Operator options must specify either an allow list or a block list"`;

exports[`Operator options should support allowing only the specified operators 1`] = `"Unary operator ! is not allowed"`;

exports[`Operator options should support allowing only the specified operators 2`] = `"Unary operator ~ is not allowed"`;

exports[`Operator options should support allowing only the specified operators 3`] = `"Binary operator + is not allowed"`;

exports[`Operator options should support allowing only the specified operators 4`] = `"Binary operator - is not allowed"`;

exports[`Operator options should support allowing only the specified operators 5`] = `"Binary operator * is not allowed"`;

exports[`Operator options should support allowing only the specified operators 6`] = `"Binary operator / is not allowed"`;

exports[`Operator options should support allowing only the specified operators 7`] = `"Binary operator < is not allowed"`;

exports[`Operator options should support allowing only the specified operators 8`] = `"Binary operator > is not allowed"`;

exports[`Operator options should support allowing only the specified operators 9`] = `"Binary operator <= is not allowed"`;

exports[`Operator options should support allowing only the specified operators 10`] = `"Binary operator >= is not allowed"`;

exports[`Operator options should support allowing only the specified operators 11`] = `"Binary operator == is not allowed"`;

exports[`Operator options should support allowing only the specified operators 12`] = `"Binary operator != is not allowed"`;

exports[`Operator options should support allowing only the specified operators 13`] = `"Binary operator === is not allowed"`;

exports[`Operator options should support allowing only the specified operators 14`] = `"Binary operator !== is not allowed"`;

exports[`Operator options should support allowing only the specified operators 15`] = `"Binary operator | is not allowed"`;

exports[`Operator options should support allowing only the specified operators 16`] = `"Binary operator ^ is not allowed"`;

exports[`Operator options should support allowing only the specified operators 17`] = `"Binary operator & is not allowed"`;

exports[`Operator options should support allowing only the specified operators 18`] = `"Binary operator << is not allowed"`;

exports[`Operator options should support allowing only the specified operators 19`] = `"Binary operator >> is not allowed"`;

exports[`Operator options should support allowing only the specified operators 20`] = `"Binary operator >>> is not allowed"`;

exports[`Operator options should support allowing only the specified operators 21`] = `"Logical operator || is not allowed"`;

exports[`Operator options should support allowing only the specified operators 22`] = `"Logical operator ?? is not allowed"`;

exports[`Operator options should support blocking specified operators 1`] = `"Unary operator + is not allowed"`;

exports[`Operator options should support blocking specified operators 2`] = `"Unary operator - is not allowed"`;

exports[`Operator options should support blocking specified operators 3`] = `"Binary operator ** is not allowed"`;

exports[`Operator options should support blocking specified operators 4`] = `"Binary operator % is not allowed"`;

exports[`Operator options should support blocking specified operators 5`] = `"Logical operator && is not allowed"`;

exports[`Operator options should support blocking specified operators 6`] = `"Conditional/ternary operator is not allowed"`;

exports[`Operator options should throw if providing an unsupported operator 1`] = `"Operator invalid is not supported"`;

exports[`Operator options should throw if providing an unsupported operator 2`] = `"Operator invalid is not supported"`;

exports[`Operator options should throw if providing an unsupported operator 3`] = `"Operator invalid is not supported"`;

exports[`Operator options should throw if providing an unsupported operator 4`] = `"Operator invalid is not supported"`;

exports[`Operator options should throw if providing an unsupported operator 5`] = `"Operator invalid is not supported"`;

exports[`Operator options should throw if providing an unsupported operator 6`] = `"Operator invalid is not supported"`;

exports[`Operator options should throw if providing both an allow and block list 1`] = `"Cannot specify both an allow list and block list of operators"`;

exports[`Operator options should throw if providing both an allow and block list 2`] = `"Cannot specify both an allow list and block list of operators"`;

exports[`Operator options should throw if providing both an allow and block list 3`] = `"Cannot specify both an allow list and block list of operators"`;

exports[`Operator options should throw if the list is not an array 1`] = `"Operator allow list must be an array"`;

exports[`Operator options should throw if the list is not an array 2`] = `"Operator block list must be an array"`;

exports[`Operator options should throw if the list is not an array 3`] = `"Operator allow list must be an array"`;

exports[`Operator options should throw if the list is not an array 4`] = `"Operator block list must be an array"`;

exports[`Operator options should throw if the list is not an array 5`] = `"Operator allow list must be an array"`;

exports[`Operator options should throw if the list is not an array 6`] = `"Operator block list must be an array"`;

exports[`Operator options should throw if the options do not contain a list 1`] = `"Operator options must specify either an allow list or a block list"`;

exports[`Operator options should throw if the options do not contain a list 2`] = `"Operator options must specify either an allow list or a block list"`;

exports[`Operator options should throw if the options do not contain a list 3`] = `"Operator options must specify either an allow list or a block list"`;

exports[`Operator options should throw if the options do not contain a list 4`] = `"Operator options must specify either an allow list or a block list"`;

exports[`Operator options should throw if the options do not contain a list 5`] = `"Operator options must specify either an allow list or a block list"`;

exports[`Operator options should throw if the options do not contain a list 6`] = `"Operator options must specify either an allow list or a block list"`;
