// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Operators (async) ?: (Conditional/Ternary) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:16)"`;

exports[`Operators (async) Binary Operators != (Inequality) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Binary Operators !== (Non-identity) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:18)"`;

exports[`Operators (async) Binary Operators % (Modulo) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:16)"`;

exports[`Operators (async) Binary Operators & (Bitwise AND) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:16)"`;

exports[`Operators (async) Binary Operators * (Multiplication) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:16)"`;

exports[`Operators (async) Binary Operators ** (Exponential) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Binary Operators + (Addition) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:16)"`;

exports[`Operators (async) Binary Operators ++, -- (Increment, Decrement) should throw an error 1`] = `"Unsupported node type: UpdateExpression"`;

exports[`Operators (async) Binary Operators ++, -- (Increment, Decrement) should throw an error 2`] = `"Unsupported node type: UpdateExpression"`;

exports[`Operators (async) Binary Operators ++, -- (Increment, Decrement) should throw an error 3`] = `"Unsupported node type: UpdateExpression"`;

exports[`Operators (async) Binary Operators ++, -- (Increment, Decrement) should throw an error 4`] = `"Unsupported node type: UpdateExpression"`;

exports[`Operators (async) Binary Operators ++, -- (Increment, Decrement) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:15)"`;

exports[`Operators (async) Binary Operators ++, -- (Increment, Decrement) should throw when the expression is missing an operand 2`] = `"Unexpected token (1:15)"`;

exports[`Operators (async) Binary Operators / (Division) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:16)"`;

exports[`Operators (async) Binary Operators < (Less than) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:16)"`;

exports[`Operators (async) Binary Operators << (Bitwise Left Shift) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Binary Operators <= (Less than or equal to) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 1`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 2`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 3`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 4`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 5`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 6`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 7`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 8`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 9`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 10`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 11`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 12`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 13`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 14`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 15`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 16`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 17`] = `"Unsupported node type: UpdateExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 18`] = `"Unsupported node type: UpdateExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 19`] = `"Unsupported node type: UpdateExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw an error 20`] = `"Unsupported node type: UpdateExpression"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:16)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 2`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 3`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 4`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 5`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 6`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 7`] = `"Unexpected token (1:18)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 8`] = `"Unexpected token (1:18)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 9`] = `"Unexpected token (1:18)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 10`] = `"Unexpected token (1:19)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 11`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 12`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 13`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 14`] = `"Unexpected token (1:18)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 15`] = `"Unexpected token (1:18)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 16`] = `"Unexpected token (1:18)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 17`] = `"Unexpected token (1:15)"`;

exports[`Operators (async) Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 18`] = `"Unexpected token (1:15)"`;

exports[`Operators (async) Binary Operators == (Equality) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Binary Operators === (Identity) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:18)"`;

exports[`Operators (async) Binary Operators > (Greater than) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:16)"`;

exports[`Operators (async) Binary Operators >= (Greater than or equal to) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Binary Operators >> (Bitwise Right Shift) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Binary Operators >>> (Bitwise Unsigned Right Shift) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:18)"`;

exports[`Operators (async) Binary Operators ^ (Bitwise XOR) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:16)"`;

exports[`Operators (async) Binary Operators | (Bitwise OR) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:16)"`;

exports[`Operators (async) Binary Operators - (Subtraction) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:16)"`;

exports[`Operators (async) Binary Operators in (Property Membership) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Binary Operators in (Property Membership) should throw when the expression is missing an operand 2`] = `"Unexpected token (1:13)"`;

exports[`Operators (async) Binary Operators instanceof (Prototype Check) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:25)"`;

exports[`Operators (async) Binary Operators instanceof (Prototype Check) should throw when the expression is missing an operand 2`] = `"Unexpected token (1:13)"`;

exports[`Operators (async) Logical Operators && (Logical AND) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Logical Operators ?? (Null coalescing) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Logical Operators || (Logical OR) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:17)"`;

exports[`Operators (async) Unary Operators Unsupported operators should throw an error 1`] = `"Unsupported unary operator: delete"`;

exports[`Operators (async) should throw when the expression contains an invalid operator 1`] = `"Unexpected token (1:21)"`;

exports[`Operators (async) should throw when the expression contains an invalid operator 2`] = `"Unexpected token (1:15)"`;

exports[`Operators ?: (Conditional/Ternary) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:10)"`;

exports[`Operators Binary Operators != (Inequality) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:11)"`;

exports[`Operators Binary Operators !== (Non-identity) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:12)"`;

exports[`Operators Binary Operators % (Modulo) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:10)"`;

exports[`Operators Binary Operators & (Bitwise AND) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:10)"`;

exports[`Operators Binary Operators * (Multiplication) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:10)"`;

exports[`Operators Binary Operators ** (Exponential) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:11)"`;

exports[`Operators Binary Operators + (Addition) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:10)"`;

exports[`Operators Binary Operators ++, -- (Increment, Decrement) should throw an error 1`] = `"Unsupported node type: UpdateExpression"`;

exports[`Operators Binary Operators ++, -- (Increment, Decrement) should throw an error 2`] = `"Unsupported node type: UpdateExpression"`;

exports[`Operators Binary Operators ++, -- (Increment, Decrement) should throw an error 3`] = `"Unsupported node type: UpdateExpression"`;

exports[`Operators Binary Operators ++, -- (Increment, Decrement) should throw an error 4`] = `"Unsupported node type: UpdateExpression"`;

exports[`Operators Binary Operators ++, -- (Increment, Decrement) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:9)"`;

exports[`Operators Binary Operators ++, -- (Increment, Decrement) should throw when the expression is missing an operand 2`] = `"Unexpected token (1:9)"`;

exports[`Operators Binary Operators / (Division) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:10)"`;

exports[`Operators Binary Operators < (Less than) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:10)"`;

exports[`Operators Binary Operators << (Bitwise Left Shift) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:11)"`;

exports[`Operators Binary Operators <= (Less than or equal to) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:11)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 1`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 2`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 3`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 4`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 5`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 6`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 7`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 8`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 9`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 10`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 11`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 12`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 13`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 14`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 15`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 16`] = `"Unsupported node type: AssignmentExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 17`] = `"Unsupported node type: UpdateExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 18`] = `"Unsupported node type: UpdateExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 19`] = `"Unsupported node type: UpdateExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw an error 20`] = `"Unsupported node type: UpdateExpression"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:10)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 2`] = `"Unexpected token (1:11)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 3`] = `"Unexpected token (1:11)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 4`] = `"Unexpected token (1:11)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 5`] = `"Unexpected token (1:11)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 6`] = `"Unexpected token (1:11)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 7`] = `"Unexpected token (1:12)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 8`] = `"Unexpected token (1:12)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 9`] = `"Unexpected token (1:12)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 10`] = `"Unexpected token (1:13)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 11`] = `"Unexpected token (1:11)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 12`] = `"Unexpected token (1:11)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 13`] = `"Unexpected token (1:11)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 14`] = `"Unexpected token (1:12)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 15`] = `"Unexpected token (1:12)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 16`] = `"Unexpected token (1:12)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 17`] = `"Unexpected token (1:9)"`;

exports[`Operators Binary Operators =, +=, -=, ... (Assignment) should throw when the expression is missing an operand 18`] = `"Unexpected token (1:9)"`;

exports[`Operators Binary Operators == (Equality) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:11)"`;

exports[`Operators Binary Operators === (Identity) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:12)"`;

exports[`Operators Binary Operators > (Greater than) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:10)"`;

exports[`Operators Binary Operators >= (Greater than or equal to) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:11)"`;

exports[`Operators Binary Operators >> (Bitwise Right Shift) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:11)"`;

exports[`Operators Binary Operators >>> (Bitwise Unsigned Right Shift) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:12)"`;

exports[`Operators Binary Operators ^ (Bitwise XOR) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:10)"`;

exports[`Operators Binary Operators | (Bitwise OR) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:10)"`;

exports[`Operators Binary Operators - (Subtraction) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:10)"`;

exports[`Operators Binary Operators in (Property Membership) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:11)"`;

exports[`Operators Binary Operators in (Property Membership) should throw when the expression is missing an operand 2`] = `"Unexpected token (1:7)"`;

exports[`Operators Binary Operators instanceof (Prototype Check) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:19)"`;

exports[`Operators Binary Operators instanceof (Prototype Check) should throw when the expression is missing an operand 2`] = `"Unexpected token (1:7)"`;

exports[`Operators Logical Operators && (Logical AND) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:11)"`;

exports[`Operators Logical Operators ?? (Null coalescing) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:11)"`;

exports[`Operators Logical Operators || (Logical OR) should throw when the expression is missing an operand 1`] = `"Unexpected token (1:11)"`;

exports[`Operators Unary Operators Unsupported operators should throw an error 1`] = `"Unsupported unary operator: delete"`;

exports[`Operators should throw when the expression contains an invalid operator 1`] = `"Unexpected token (1:15)"`;

exports[`Operators should throw when the expression contains an invalid operator 2`] = `"Unexpected token (1:9)"`;
